planning_task:
  description: >
    Given a conversation between a user and an assistant, identify and extract a structured, step-by-step tool execution plan based on the user's latest instructions. Each step should include the tool name and a concise command derived from the user's input. Prioritize the most recent instructions and preserve formatting for any quoted values, code, or paths.

    Analyze the conversation history, focusing especially on the most recent entries:

    {conversation_history}

    The later entries in the list represent the most recent and relevant parts of the conversation between the user and the assistant,
    and should be given higher priority when interpreting the user's intent â€” especially the last clear instruction from the user.

    The user's most recent command is:
    {last_command}

    Consider the following available tools:
    {tools}

    Based on this, produce a structured plan in which **each step is a pair**:
    - `tool_name`: the name of a tool to use (must match one of the provided tool names).
    - `command`: a short instruction extracted or inferred from the user's request that explains what the tool should do.

    When extracting the command:

    - **Never introduce any steps that are not explicitly stated by the user.**
    - Preserve any user-provided **code**, **URLs**, **file names**, **explicit strings**, and **formatting** exactly as they appear.
    - Retain **newlines**, indentation, and paragraph breaks.
    - If the user includes configuration values, quoted identifiers, or paths, **do not modify or summarize** them.
    - If the user follows up or modifies their request, always prefer the **most recent** instruction.
     **Treat any GSQL `CREATE QUERY` code blocks as valid input for the `create_query` tool, even if they include default parameters (`=`), empty strings (`""`), multi-line formatting, or nested types. Do not discard them or attempt to simplify.**

    Format the output as a **JSON array** of objects with `tool_name` and `command` keys, in the order they should be executed.

    If no tools apply to the request, return the value `None` (no quotes, no JSON).

    Examples:
    ```
    [
      {
        "tool_name": "graph__create_schema",
        "command": "Create a schema for a movie recommendation system"
      },
      {
        "tool_name": "graph__load_data",
        "command": "Load the movie and rating data from uploaded CSV files"
      }
    ]
    ```

    Or:
    None

    ### Special Cases:
    If the **user's most recent message** includes something like "help", "can you help me?", "what can you do?", or "show me examples",  
    return: help (no quotes, no JSON).

    If the **user's most recent message** includes something like "onboarding", "guide me", "get started", "walk me through", etc.,  
    return: onboarding (no quotes, no JSON).

  expected_output: >
    A JSON array of tool plan steps, where each step includes:
    - `"tool_name"`: (str) the name of a tool from the list.
    - `"command"`: (str) the user instruction related to the tool.

    Or the literal `None` (no quotes) if nothing matches.

  agent: planner_agent
