# ------------------------------ Schema Operations ------------------------------
analyze_and_propose_schema_task:
  description: >
    Analyze the provided data tables to propose a graph schema using best practices.

    ## Phase 1: Analyze Data and Propose Schema

    Follow these steps:
    1. Identify node types using primary keys.
    2. For each column, classify it as attribute, reference, or new node.
    3. Infer edges and directionality based on references or edge tables.
    4. Output the schema proposal in **markdown** format for user review.

    ## Schema Design Best Practices

    ### Naming the Graph

    When proposing a graph name, follow these guidelines:
    - The name should be **related to the use case or data domain** (e.g., for employee/project data, a name like `WorkforceGraph` is appropriate).
    - Use **PascalCase** formatting: capitalize the first letter of each word and do not use spaces or underscores (e.g., `SocialGraph`, `SupplyChainGraph`, `MedicalRecordsGraph`).

    ### Example Tables

    **Table 1: Employee Data (Node Table)**

    | employee_id | email                                         | manager_id | department | location      |
    | ----------- | --------------------------------------------- | ---------- | ---------- | ------------- |
    | E001        | [alice@example.com](mailto:alice@example.com) | E005       | Sales      | New York      |
    | E002        | [bob@example.com](mailto:bob@example.com)     | E005       | Sales      | New York      |
    | E003        | [carol@example.com](mailto:carol@example.com) | E006       | Marketing  | San Francisco |

    **Table 2: Employee_Project (Edge Table)**

    | employee_id | project_id | role      | start_date |
    | ----------- | ---------- | --------- | ---------- |
    | E001        | P100       | Developer | 2023-01-01 |
    | E002        | P101       | Tester    | 2023-02-15 |
    | E003        | P100       | Analyst   | 2023-03-01 |

    ### Step-by-Step Guide for Schema Design

    1. **Identify node types and primary keys.**
       - Every node table must define a unique identifier (primary key), which becomes the node's primary ID in the graph.
       - From Table 1, `employee_id` is a unique identifier.
       - Define a node type `Employee` with `employee_id` as the primary ID.

    2. **Classify columns as attributes, references, or node types.**
       - Repeated values → attributes.
       - Unique identifiers → new node types.
       - Self-references → edges.
       - In `Employee`:
         - Attributes: `department`, `location`
         - Node: `Email` from `email`
         - Reference: `manager_id` refers to another `employee_id`
         - Create a directed edge `employee_manages_employee` from manager to employee.
         - Create an undirected edge `employee_has_email` between `Employee` and `Email`.

    3. **Identify edge tables and relationship attributes.**
       - Table 2 connects `Employee` and `Project`.
       - Create a node type `Project` using `project_id` as primary key.
       - Relationship-specific attributes: `role`, `start_date`.

    4. **Define edge types.**
       - Edge `employee_works_on_project` from `Employee` to `Project` with attributes `role`, `start_date`.

    5. **Determine edge directionality.**
       - Directed: same node types (e.g., manager to employee)
       - Undirected: different node types unless semantics imply direction.

    6. **Validate schema consistency.**
       - Ensure all node types have primary keys.
       - Ensure all edges reference valid nodes.
       - Ensure all attributes and names are meaningful.

    Output the schema proposal in markdown format, including:
    - Graph Name
    - Node Types with primary IDs and attributes
    - Edge Types with directionality and attributes

    ## Inputs
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    You are also provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

  expected_output: >
    Provide a clear, user-friendly message with three parts: a short introduction, a Markdown schema proposal, and a confirmation request. 
    Only show the results—**do not include any process or reasoning!**

    Follow this structure:

    1. Short introduction  
    2. Markdown schema proposal (include graph name, node types with primary IDs and attributes, and edge types)  
    3. Clear confirmation request

    Example:

    Here is the schema I created based on your input.

    ### Graph Name
    EmployeeGraph

    ### Node Types
    - **employee** (primary_id: id)
      - id: STRING
      - name: STRING
      - email: STRING

    - **department** (primary_id: dept_id)
      - dept_id: STRING
      - name: STRING

    ### Edge Types
    - works_for (FROM: employee, TO: department, undirected)
      - since: DATE

    - manages (FROM: employee, TO: employee, directed)
      - level: STRING

    Please confirm if this looks good by replying with "confirmed", "approved", "go ahead", "ok", or similar. Or tell me if you want to make any changes.

  agent: schema_agent

confirm_or_edit_schema_task:
  description: >
    Interactively guide the user through multiple rounds of confirmation or edits until the schema is finalized.

    Steps:
    - Present the current schema proposal in **markdown** format.
    - Ask the user for confirmation or feedback by using the tool HumanInputTool.
    - If the user confirms with phrases like "confirmed", "approved", "go ahead", "ok", or similar, then:
      - Format and output the final schema in the **Final Schema Output Format** below.
      - Stop this task to allow the next task (schema creation) to proceed.
    - Otherwise, incorporate the user's latest feedback or suggestions, update the schema accordingly, and present the revised schema for further confirmation.
    - Repeat this interaction loop, **only stopping once explicit user confirmation is received**.

  expected_output: >
    Provide a clear, user-friendly message with three parts: a short introduction, a Markdown schema proposal, and a confirmation request. 
    Only show the results—**do not include any process or reasoning!**

    Follow this structure:

    1. Short introduction  
    2. Markdown schema proposal (include graph name, node types with primary IDs and attributes, and edge types)  
    3. Clear confirmation request

    Example:

    Here is the schema I created based on your input.

    ### Graph Name
    EmployeeGraph

    ### Node Types
    - **employee** (primary_id: id)
      - id: STRING
      - name: STRING
      - email: STRING

    - **department** (primary_id: dept_id)
      - dept_id: STRING
      - name: STRING

    ### Edge Types
    - works_for (FROM: employee, TO: department, undirected)
      - since: DATE

    - manages (FROM: employee, TO: employee, directed)
      - level: STRING

    Please confirm if this looks good by replying with "confirmed", "approved", "go ahead", "ok", or similar. Or tell me if you want to make any changes.

  agent: schema_agent

create_and_execute_schema_task:
  description: >
    Use the final confirmed schema to call the TigerGraph `CREATE_SCHEMA` tool.
    Ensure the input format matches tool expectations.

    If the call fails, let CrewAI retry using updated tool inputs.

  expected_output: >
    Confirmation message with schema creation success.

  agent: schema_agent

get_schema_task:
  description: >
    Retrieve the schema of a graph from TigerGraph using the provided graph name.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Based on the provided graph name, you will retrieve and display the schema of the corresponding graph in TigerGraph. Ensure that the user has provided the correct graph name.

  expected_output: >
    The schema of the graph, including details such as node types, edge types, and their respective attributes.

  agent: schema_agent

graph_drop_task:
  description: >
    Drop a specified graph from TigerGraph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Verify the provided graph name before proceeding.

  expected_output: >
    Confirmation of successful graph deletion, including the graph name.

  agent: schema_agent

# ------------------------------ Data Loading Operations ------------------------------
load_data_task:
  description: >
    Load data into a TigerGraph graph using a user-provided description of the data files.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    First, analyze the file structure and user-provided details (such as CSV headers, file paths, and data mappings). Then, generate a valid loading job configuration and use the appropriate tool to load the data into the target graph.

  expected_output: >
    Confirmation that the data has been successfully loaded into the specified graph, including the graph name, or a meaningful error message if the process fails.

  agent: data_loader_agent

# ------------------------------ Node Operations ------------------------------
add_node_task:
  description: >
    Add a node to the graph in TigerGraph with the specified attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Given a node ID and optional node type, add the node to the graph along with any provided attributes. Ensure the node type is valid before proceeding.

  expected_output: >
    Confirmation that the node has been successfully added to the graph.

  agent: node_agent

add_nodes_task:
  description: >
    Add multiple nodes to the graph in TigerGraph with the specified attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Given a list of node IDs and optional attributes, add them to the graph in bulk. Ensure efficient processing and handle missing or inconsistent data gracefully.

  expected_output: >
    Confirmation of the number of nodes successfully added to the graph.

  agent: node_agent

remove_node_task:
  description: >
    Remove a node from the graph in TigerGraph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Given a node ID and optional node type, remove the node from the graph if it exists. Validate that the node exists before attempting removal.

  expected_output: >
    Confirmation that the node has been successfully removed or an error message if the node was not found.

  agent: node_agent

has_node_task:
  description: >
    Check if a node exists in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Given a node ID and optional node type, verify whether the node is present in the graph.

  expected_output: >
    A boolean value indicating whether the node exists in the graph.

  agent: node_agent

get_node_data_task:
  description: >
    Retrieve data for a specific node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Given a node ID and optional node type, fetch and return the node's attributes and properties.

  expected_output: >
    A structured representation of the node’s attributes.

  agent: node_agent

get_node_edges_task:
  description: >
    Retrieve edges connected to a specific node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Given a node ID, optional node type, and optional edge types, fetch all edges associated with the node.

  expected_output: >
    A list of edges connected to the node, represented as (from_id, to_id) pairs.

  agent: node_agent

clear_graph_data_task:
  description: >
    Remove all nodes from the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Clear all nodes from the graph while maintaining structural integrity.

  expected_output: >
    Confirmation that all nodes have been successfully cleared from the graph.

  agent: node_agent

# ------------------------------ Edge Operations ------------------------------
add_edge_task:
  description: >
    Add a single edge between two existing nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Extract the source node, target node, edge type, and any edge attributes from the conversation. 
    Validate the edge type and ensure both nodes exist before adding the edge.

  expected_output: >
    A confirmation that the edge has been successfully added, or a validation error if the edge could not be created.

  agent: edge_agent

add_edges_task:
  description: >
    Add multiple edges in bulk between nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Extract a list of edge definitions (source, target, edge type, and optional attributes) from the user input. 
    Validate each edge against the schema and existing nodes before attempting to add them in bulk.

  expected_output: >
    A report summarizing the number of successfully added edges, skipped edges, and any errors encountered.

  agent: edge_agent

has_edge_task:
  description: >
    Check whether an edge exists between two specified nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Extract the source node, target node, and edge type from the conversation. 
    Return whether the specified edge currently exists in the graph.

  expected_output: >
    A Boolean value (true/false) indicating whether the specified edge exists between the given nodes.

  agent: edge_agent

get_edge_data_task:
  description: >
    Retrieve all attribute data associated with a specific edge between two nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Extract the source node, target node, and edge type from the user’s instruction. 
    Query the graph and return all stored edge attributes if the edge exists.

  expected_output: >
    A dictionary of edge attributes if the edge exists, or an informative error message if it does not.

  agent: edge_agent

# ------------------------------ Statistics Operations ------------------------------
degree_task:
  description: >
    Calculate the degree of one or more nodes in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Determine the degree (number of connected edges) for the specified node(s).

  expected_output: >
    A dictionary or table listing each node and its degree.

  agent: statistics_agent

number_of_nodes_task:
  description: >
    Return the number of nodes currently in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Report the total number of nodes in the graph.

  expected_output: >
    A sentence stating the total number of nodes currently in the graph, such as "There are 3,452 nodes in the graph."

  agent: statistics_agent

number_of_edges_task:
  description: >
    Return the number of edges currently in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Report the total number of edges in the graph.

  expected_output: >
    A sentence stating the total number of edges currently in the graph, such as "There are 12,784 edges in the graph."

  agent: statistics_agent

# ------------------------------ Query Operations ------------------------------
create_query_task:
  description: >
    Create a new GSQL query on the graph using raw GSQL syntax.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Extract the full GSQL query content from the conversation and use it to create the query.

  expected_output: >
    A confirmation message indicating whether the query was successfully created.

  agent: query_agent

install_query_task:
  description: >
    Install a previously created GSQL query on the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Extract the name of the query to be installed and install it on the graph.

  expected_output: >
    A confirmation message indicating successful installation of the query.

  agent: query_agent

run_query_task:
  description: >
    Execute a pre-installed GSQL query with specified input parameters.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Extract the query name and any parameters required for execution, then run the query.

  expected_output: >
    A structured list or DataFrame representing the output of the executed query.

  agent: query_agent

drop_query_task:
  description: >
    Drop an existing GSQL query from the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Identify the query to be dropped and remove it from the graph.

  expected_output: >
    A confirmation message indicating whether the query was successfully dropped.

  agent: query_agent

get_nodes_task:
  description: >
    Retrieve all or a filtered subset of nodes from the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Fetch all nodes of the specified type, optionally applying attribute filters.

  expected_output: >
    A list or table of nodes that match the criteria, including their attributes.

  agent: query_agent

get_neighbors_task:
  description: >
    Retrieve neighbors (connected nodes) for a specific node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Identify all direct neighbors of the specified node, optionally filtered by edge types.

  expected_output: >
    A structured list or DataFrame showing the neighboring nodes and the edges connecting them.

  agent: query_agent

breadth_first_search_task:
  description: >
    Perform a breadth-first search (BFS) traversal from a given start node.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Perform BFS starting from the specified node(s) and return nodes found within the given hop range.

  expected_output: >
    A list or DataFrame of nodes visited during the BFS traversal, including their `_bfs_level`.

  agent: query_agent

# ------------------------------ Vector Operations ------------------------------
upsert_vector_task:
  description: >
    Upsert (insert or update) vector data for a node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Use the provided node ID and vector to update or insert vector attributes in the graph.

  expected_output: >
    A confirmation that the vector data has been successfully upserted.

  agent: vector_agent

fetch_node_task:
  description: >
    Retrieve a specific node, including its vector attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Fetch the full data and vector representation of the specified node.

  expected_output: >
    A structured representation of the node, including its vector fields.

  agent: vector_agent

fetch_nodes_task:
  description: >
    Retrieve multiple nodes, optionally filtered, including vector attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Fetch multiple nodes and include their vector fields in the response.

  expected_output: >
    A list or DataFrame of nodes with their full data and vector embeddings.

  agent: vector_agent

vector_search_task:
  description: >
    Perform a similarity search using a single vector query.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Use the given vector input to search for the most similar nodes in the graph.

  expected_output: >
    A ranked list of nodes based on similarity scores to the input vector.

  agent: vector_agent

search_multi_vector_attributes_task:
  description: >
    Perform a similarity search using multiple vector attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Use multiple vector attributes to search for nodes with the best combined similarity.

  expected_output: >
    A list of the most relevant nodes based on multiple vector dimensions.

  agent: vector_agent

search_top_k_similar_nodes_task:
  description: >
    Retrieve the top-K most similar nodes to a given vector input.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Find and return the top K nodes most similar to the provided vector representation.

  expected_output: >
    A list of the top K nodes sorted by similarity score.

  agent: vector_agent

# ------------------------------ Data Source Operations ------------------------------
create_data_source_task:
  description: >
    Register a new data source in TigerGraph using the provided file or folder path.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Based on the user’s intent, extract the target path and optional parameters like delimiter or recursive mode.

  expected_output: >
    Confirmation that the data source has been successfully created and is now available for inspection or loading.

  agent: data_source_agent


drop_data_source_task:
  description: >
    Drop an existing data source from the TigerGraph server.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Confirm the name or path before performing the deletion.

  expected_output: >
    Confirmation that the specified data source has been dropped successfully.

  agent: data_source_agent


preview_sample_data_task:
  description: >
    Preview the contents of a data file or folder registered as a data source.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:

    {conversation_history}

    Additionally, you are provided with `current_command`, which may be part of the user's latest instruction or a 
    refined version extracted by the system:

    {current_command}

    Always treat `current_command` as a highly relevant input — it typically reflects the latest user-provided intent or follow-up.
    Return the column headers and a sample of 5–10 rows to help guide the user in schema creation.

  expected_output: >
    A clean preview of the data file including headers and the first 5–10 rows in markdown table format.

  agent: data_source_agent

