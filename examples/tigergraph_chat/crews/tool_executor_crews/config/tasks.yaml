# ------------------------------ Schema Operations ------------------------------
create_schema_task:
  description: >
    Create a schema in TigerGraph using the provided schema definition.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Based on the provided schema description, you will generate an appropriate graph schema that meets the user’s requirements. Ensure to ask for any missing details if necessary.

  expected_output: >
    Confirmation that the schema has been successfully created in TigerGraph, including the graph name, but without displaying the details of the created graph schema.

  agent: schema_agent

get_schema_task:
  description: >
    Retrieve the schema of a graph from TigerGraph using the provided graph name.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Based on the provided graph name, you will retrieve and display the schema of the corresponding graph in TigerGraph. Ensure that the user has provided the correct graph name.

  expected_output: >
    The schema of the graph, including details such as node types, edge types, and their respective attributes.

  agent: schema_agent

graph_drop_task:
  description: >
    Drop a specified graph from TigerGraph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Verify the provided graph name before proceeding.

  expected_output: >
    Confirmation of successful graph deletion, including the graph name.

  agent: schema_agent

# ------------------------------ Data Loading Operations ------------------------------
load_data_task:
  description: >
    Load data into a TigerGraph graph using a user-provided description of the data files.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    First, analyze the file structure and user-provided details (such as CSV headers, file paths, and data mappings). Then, generate a valid loading job configuration and use the appropriate tool to load the data into the target graph.

  expected_output: >
    Confirmation that the data has been successfully loaded into the specified graph, including the graph name, or a meaningful error message if the process fails.

  agent: data_loader_agent

# ------------------------------ Node Operations ------------------------------
add_node_task:
  description: >
    Add a node to the graph in TigerGraph with the specified attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Given a node ID and optional node type, add the node to the graph along with any provided attributes. Ensure the node type is valid before proceeding.

  expected_output: >
    Confirmation that the node has been successfully added to the graph.

  agent: node_agent

add_nodes_task:
  description: >
    Add multiple nodes to the graph in TigerGraph with the specified attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Given a list of node IDs and optional attributes, add them to the graph in bulk. Ensure efficient processing and handle missing or inconsistent data gracefully.

  expected_output: >
    Confirmation of the number of nodes successfully added to the graph.

  agent: node_agent

remove_node_task:
  description: >
    Remove a node from the graph in TigerGraph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Given a node ID and optional node type, remove the node from the graph if it exists. Validate that the node exists before attempting removal.

  expected_output: >
    Confirmation that the node has been successfully removed or an error message if the node was not found.

  agent: node_agent

has_node_task:
  description: >
    Check if a node exists in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Given a node ID and optional node type, verify whether the node is present in the graph.

  expected_output: >
    A boolean value indicating whether the node exists in the graph.

  agent: node_agent

get_node_data_task:
  description: >
    Retrieve data for a specific node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Given a node ID and optional node type, fetch and return the node's attributes and properties.

  expected_output: >
    A structured representation of the node’s attributes.

  agent: node_agent

get_node_edges_task:
  description: >
    Retrieve edges connected to a specific node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Given a node ID, optional node type, and optional edge types, fetch all edges associated with the node.

  expected_output: >
    A list of edges connected to the node, represented as (from_id, to_id) pairs.

  agent: node_agent

clear_graph_data_task:
  description: >
    Remove all nodes from the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Clear all nodes from the graph while maintaining structural integrity.

  expected_output: >
    Confirmation that all nodes have been successfully cleared from the graph.

  agent: node_agent

# ------------------------------ Edge Operations ------------------------------
add_edge_task:
  description: >
    Add a single edge between two existing nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Extract the source node, target node, edge type, and any edge attributes from the conversation. 
    Validate the edge type and ensure both nodes exist before adding the edge.

  expected_output: >
    A confirmation that the edge has been successfully added, or a validation error if the edge could not be created.

  agent: edge_agent

add_edges_task:
  description: >
    Add multiple edges in bulk between nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Extract a list of edge definitions (source, target, edge type, and optional attributes) from the user input. 
    Validate each edge against the schema and existing nodes before attempting to add them in bulk.

  expected_output: >
    A report summarizing the number of successfully added edges, skipped edges, and any errors encountered.

  agent: edge_agent

has_edge_task:
  description: >
    Check whether an edge exists between two specified nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Extract the source node, target node, and edge type from the conversation. 
    Return whether the specified edge currently exists in the graph.

  expected_output: >
    A Boolean value (true/false) indicating whether the specified edge exists between the given nodes.

  agent: edge_agent

get_edge_data_task:
  description: >
    Retrieve all attribute data associated with a specific edge between two nodes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Extract the source node, target node, and edge type from the user’s instruction. 
    Query the graph and return all stored edge attributes if the edge exists.

  expected_output: >
    A dictionary of edge attributes if the edge exists, or an informative error message if it does not.

  agent: edge_agent

# ------------------------------ Statistics Operations ------------------------------
degree_task:
  description: >
    Calculate the degree of one or more nodes in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Determine the degree (number of connected edges) for the specified node(s).

  expected_output: >
    A dictionary or table listing each node and its degree.

  agent: statistics_agent

number_of_nodes_task:
  description: >
    Return the number of nodes currently in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Report the total number of nodes in the graph.

  expected_output: >
    An integer indicating how many nodes are currently in the graph.

  agent: statistics_agent

number_of_edges_task:
  description: >
    Return the number of edges currently in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Report the total number of edges in the graph.

  expected_output: >
    An integer indicating how many edges are currently in the graph.

  agent: statistics_agent

# ------------------------------ Query Operations ------------------------------
get_nodes_task:
  description: >
    Retrieve all or a filtered subset of nodes from the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Fetch all nodes of the specified type, optionally applying attribute filters.

  expected_output: >
    A list or table of nodes that match the criteria, including their attributes.

  agent: query_agent

get_neighbors_task:
  description: >
    Retrieve neighbors (connected nodes) for a specific node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Identify all direct neighbors of the specified node, optionally filtered by edge types.

  expected_output: >
    A structured list or DataFrame showing the neighboring nodes and the edges connecting them.

  agent: query_agent

breadth_first_search_task:
  description: >
    Perform a breadth-first search (BFS) traversal from a given start node.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Perform BFS starting from the specified node(s) and return nodes found within the given hop range.

  expected_output: >
    A list or DataFrame of nodes visited during the BFS traversal, including their `_bfs_level`.

  agent: query_agent

# ------------------------------ Vector Operations ------------------------------
upsert_vector_task:
  description: >
    Upsert (insert or update) vector data for a node in the graph.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Use the provided node ID and vector to update or insert vector attributes in the graph.

  expected_output: >
    A confirmation that the vector data has been successfully upserted.

  agent: vector_agent

fetch_node_task:
  description: >
    Retrieve a specific node, including its vector attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Fetch the full data and vector representation of the specified node.

  expected_output: >
    A structured representation of the node, including its vector fields.

  agent: vector_agent

fetch_nodes_task:
  description: >
    Retrieve multiple nodes, optionally filtered, including vector attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Fetch multiple nodes and include their vector fields in the response.

  expected_output: >
    A list or DataFrame of nodes with their full data and vector embeddings.

  agent: vector_agent

vector_search_task:
  description: >
    Perform a similarity search using a single vector query.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Use the given vector input to search for the most similar nodes in the graph.

  expected_output: >
    A ranked list of nodes based on similarity scores to the input vector.

  agent: vector_agent

search_multi_vector_attributes_task:
  description: >
    Perform a similarity search using multiple vector attributes.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Use multiple vector attributes to search for nodes with the best combined similarity.

  expected_output: >
    A list of the most relevant nodes based on multiple vector dimensions.

  agent: vector_agent

search_top_k_similar_nodes_task:
  description: >
    Retrieve the top-K most similar nodes to a given vector input.

    Instructions
    ------------
    You are given a list representing a conversation history between the user and the assistant. 
    The most recent entries at the bottom of the list are the most relevant to the user’s current intent, 
    so prioritize those when interpreting the instructions:
    {conversation_history}

    Connection Configuration
    ------------------------
    {connection_config}

    Find and return the top K nodes most similar to the provided vector representation.

  expected_output: >
    A list of the top K nodes sorted by similarity score.

  agent: vector_agent
